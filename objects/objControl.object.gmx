<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTank</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-12</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
barrel = instance_create(x,y,objBarrel);

pointing = 33;
xVelocity = 0;
fric = 0.1;

trajectT = 0;
fireVelocity = 20;
grav = 1.2;
airRes = 0.1;
moveSpeed = 0.2;
topSpeed = 4;
viewTarget = x;
hit = 0;
fireRate = 15;

toDrawX = ds_list_create();
toDrawY = ds_list_create();
toDrawXprev = ds_list_create();
toDrawYprev = ds_list_create();
damagedTimer = 0;
pTimer = 120;
fireTimer = 0;

// Stats
scrap = 0;
maxHp = 15;
hp = maxHp;
accelMod = 1;
topSpdMod = 1.5;
repair = 1;
expAmt = 1;
reloadMod = 1;
damage = 1;
muzVelo = 1;
resistChance = 0;

// Meta
stages = ds_list_create();
ds_list_add(stages, ds_list_create());
ds_list_add(stages[|0], 0);  // 0=normal,1=hard,2=shop
ds_list_add(stages[|0], 2);
ds_list_add(stages[|0], 0);
ds_list_add(stages[|0], 1);

global.level = 0;
global.stage = 0;
currentStage = stages[|global.stage];
currentLevel = currentStage[|global.level];
nextLevel = currentStage[|global.level+1];

show_debug_message(currentStage[|0]);
show_debug_message(currentStage[|1]);
show_debug_message(currentStage[|2]);
show_debug_message(currentStage[|3]);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objPlayer)) {
    // Move
    left = -keyboard_check(vk_left);
    right = keyboard_check(vk_right);
    mov = left+right;
    
    overspeed = 0;
    if (topSpeed*topSpdMod-abs(xVelocity) &lt; 0) {
        overspeed = 1;
    }
    xVelocity += mov*moveSpeed*accelMod - (sign(xVelocity)*fric)- (sign(xVelocity)*overspeed);
    
    if (abs(xVelocity) &lt; moveSpeed) xVelocity = 0;
    player.x += xVelocity;
    if (player.x &lt; 0) player.x = 0;
    
    // Animate
    barrel.visible = 1;
    if (xVelocity == 0) player.image_speed = 0;
    else {
        player.image_speed = 1;
    }
    
    // Barrel
    up = keyboard_check(ord('Z'));
    down = -keyboard_check(ord('X'));
    pointing += up+down;
    if (pointing &lt; 0) pointing = 0;
    if (pointing &gt; 180) pointing = 180;
    
    barrel.x = player.x+11;
    barrel.y = player.y-36;
    barrel.image_index = pointing/(180/13);
    
    // Shoot
    
    if (fireTimer &gt; 0) fireTimer -= 1;
    if (fireTimer &lt;= 0) {
    if (keyboard_check(ord('C'))) {
        // Projectile
        var b = instance_create(barrel.x,barrel.y,objBullet);
        b.owner = id;
        b.xv = dcos(pointing)*fireVelocity;// + xVelocity;
        b.yv = -dsin(pointing)*fireVelocity;
        b.grav = grav;
        b.airRes = airRes;
        b.visTimer = 2;
        // Muzzle flash
        var f = instance_create(barrel.x,barrel.y,objMuzzleflash);
        f.sprite_index = sprFire2;
        f.owner = barrel;
        var diff = abs(pointing-90);
        f.yOffset = (90-diff)*0.2;
        f.image_angle = pointing;
        // Reload
        fireTimer = fireRate*reloadMod;
    }}
    
    // Hits
    hit = instance_place(player.x,player.y,objBulletEnemy);
    if (hit) {
        hp -= 1;
        damagedTimer = 3;
        with (hit) instance_destroy();
    }
    ram = instance_place(player.x,player.y,objEnemy);
    if (ram) {
        if (ram.object_index != objSoldier2) {
            hp -= 1;
            damagedTimer = 3;
            with (ram) instance_destroy();
        }
    }
    
    // Trajectory
    var prevX = barrel.x;
    var prevY = barrel.y;
    var xv = dcos(pointing)*fireVelocity;
    var yv = -dsin(pointing)*fireVelocity;
    ds_list_clear(toDrawX);
    ds_list_clear(toDrawY);
    ds_list_clear(toDrawXprev);
    ds_list_clear(toDrawYprev);
    for (var i=0; i&lt;50; i++) {
        pos = bulletMove(prevX,prevY,xv,yv);
        xv = pos[0];
        yv = pos[1];
        xx = pos[2];
        yy = pos[3];
        if (i&gt;=1) { 
            ds_list_add(toDrawX, xx);
            ds_list_add(toDrawY, yy);
            ds_list_add(toDrawXprev, prevX);
            ds_list_add(toDrawYprev, prevY);
        }
        prevX = xx;
        prevY = yy;
        prevXv = xv;
        prevYv = yv;
        if (yy &gt; player.y) break;
    }
    
    // Interact
    /*int = instance_nearest(player.x,player.y,objInteractable);
    intX = 0;
    if (int) {
        if (point_distance(player.x,player.y,int.x,int.y) &lt; 70) {
            intLabel = 'Press Spacebar to interact';
            intX = int.x;
        }
        else {
            intLabel = "";
        }
    }*/
    
    // Levels
    if (player.x &gt; room_width) {
        var stageAmt = ds_list_size(stages[|global.stage]);
        if (global.level &lt; stageAmt) {
            global.level += 1;
            nextLevel = currentStage[|global.level+1];
        }
        else {
            ds_list_add(stages, ds_list_create());
            ds_list_add(stages[|global.stage], irandom(2));  // 0=normal,1=hard,2=shop
            ds_list_add(stages[|global.stage], irandom(2));
            ds_list_add(stages[|global.stage], irandom(2));
            ds_list_add(stages[|global.stage], irandom(2));
            global.level = 0;
            nextLevel = -1;
        }
        currentStage = stages[|global.stage];
        currentLevel = currentStage[|global.level];
        if (currentLevel == 0) room_goto(room4);
        if (currentLevel == 1) room_goto(rmHard);
        if (currentLevel == 2) room_goto(rmShop);
    }
    
    // HP
    if (hp &gt; maxHp) hp = maxHp;
    if (hp &lt;= 0) {
        e = instance_create(player.x,player.y,objExplosion);
        e.sprite_index = sprExplode1;
        e.scale = 2;
        e.image_xscale = e.scale;
        e.image_yscale = e.scale;
        with(player) instance_destroy();
    }
}
// View
if (instance_exists(objPlayer)) viewTarget = player.x-(view_wview[0]/2)-((pointing-90)*3);
view_xview[0] = viewTarget;

// Parallax BG
background_x[1] = viewTarget*0.90;
background_x[2] = viewTarget*0.80;

if (instance_exists(objForeground)) objForeground.xx = viewTarget*1.5;

if (!instance_exists(objPlayer)) {
    barrel.visible = 0;
    pTimer -= 1;
    if (pTimer &lt;= 0) {
        player = instance_create(x,y,objPlayer);
        pTimer = 120;
        hp = maxHp;
        scrap = 0;//floor(scrap/2);
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

currentStage = stages[|global.stage];
currentLevel = currentStage[|global.level];




player = instance_create(x,y,objPlayer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (!instance_exists(objPlayer)) {
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    draw_set_font(font2);
    draw_text(320,180,'Scrap lost. Respawning... ');
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.5);
draw_set_color(c_white);
// draw traj
for (var i=0; i&lt;ds_list_size(toDrawX); i++) {
    //var dr = toDraw[|i];
    //draw_line(dr[0],dr[1],dr[2],dr[3]);
    draw_line(toDrawX[|i],toDrawY[|i],toDrawXprev[|i],toDrawYprev[|i]);
}
draw_set_alpha(1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
